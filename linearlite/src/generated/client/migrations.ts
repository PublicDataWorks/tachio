export default [
  {
    "statements": [
      "CREATE TABLE \"issues\" (\n  \"id\" TEXT NOT NULL,\n  \"title\" TEXT NOT NULL,\n  \"description\" TEXT NOT NULL,\n  \"priority\" TEXT NOT NULL,\n  \"status\" TEXT NOT NULL,\n  \"modified\" TEXT NOT NULL,\n  \"created\" TEXT NOT NULL,\n  \"kanbanorder\" TEXT NOT NULL,\n  \"username\" TEXT NOT NULL,\n  CONSTRAINT \"issue_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"comments\" (\n  \"id\" TEXT NOT NULL,\n  \"body\" TEXT NOT NULL,\n  \"username\" TEXT NOT NULL,\n  \"issue_id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  CONSTRAINT \"comments_issue_id_fkey\" FOREIGN KEY (\"issue_id\") REFERENCES \"issues\" (\"id\"),\n  CONSTRAINT \"comment_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.issues', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_issues_primarykey;",
      "CREATE TRIGGER update_ensure_main_issues_primarykey\n  BEFORE UPDATE ON \"main\".\"issues\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_issues_into_oplog;",
      "CREATE TRIGGER insert_main_issues_into_oplog\n   AFTER INSERT ON \"main\".\"issues\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issues')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'issues', 'INSERT', json_object('id', new.\"id\"), json_object('created', new.\"created\", 'description', new.\"description\", 'id', new.\"id\", 'kanbanorder', new.\"kanbanorder\", 'modified', new.\"modified\", 'priority', new.\"priority\", 'status', new.\"status\", 'title', new.\"title\", 'username', new.\"username\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_issues_into_oplog;",
      "CREATE TRIGGER update_main_issues_into_oplog\n   AFTER UPDATE ON \"main\".\"issues\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issues')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'issues', 'UPDATE', json_object('id', new.\"id\"), json_object('created', new.\"created\", 'description', new.\"description\", 'id', new.\"id\", 'kanbanorder', new.\"kanbanorder\", 'modified', new.\"modified\", 'priority', new.\"priority\", 'status', new.\"status\", 'title', new.\"title\", 'username', new.\"username\"), json_object('created', old.\"created\", 'description', old.\"description\", 'id', old.\"id\", 'kanbanorder', old.\"kanbanorder\", 'modified', old.\"modified\", 'priority', old.\"priority\", 'status', old.\"status\", 'title', old.\"title\", 'username', old.\"username\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_issues_into_oplog;",
      "CREATE TRIGGER delete_main_issues_into_oplog\n   AFTER DELETE ON \"main\".\"issues\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issues')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'issues', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created', old.\"created\", 'description', old.\"description\", 'id', old.\"id\", 'kanbanorder', old.\"kanbanorder\", 'modified', old.\"modified\", 'priority', old.\"priority\", 'status', old.\"status\", 'title', old.\"title\", 'username', old.\"username\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.comments', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_comments_primarykey;",
      "CREATE TRIGGER update_ensure_main_comments_primarykey\n  BEFORE UPDATE ON \"main\".\"comments\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_comments_into_oplog;",
      "CREATE TRIGGER insert_main_comments_into_oplog\n   AFTER INSERT ON \"main\".\"comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.comments')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'comments', 'INSERT', json_object('id', new.\"id\"), json_object('body', new.\"body\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'issue_id', new.\"issue_id\", 'username', new.\"username\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_comments_into_oplog;",
      "CREATE TRIGGER update_main_comments_into_oplog\n   AFTER UPDATE ON \"main\".\"comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.comments')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'comments', 'UPDATE', json_object('id', new.\"id\"), json_object('body', new.\"body\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'issue_id', new.\"issue_id\", 'username', new.\"username\"), json_object('body', old.\"body\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'issue_id', old.\"issue_id\", 'username', old.\"username\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_comments_into_oplog;",
      "CREATE TRIGGER delete_main_comments_into_oplog\n   AFTER DELETE ON \"main\".\"comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.comments')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'comments', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('body', old.\"body\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'issue_id', old.\"issue_id\", 'username', old.\"username\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_comments_issue_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_comments_issue_id_into_oplog\n  AFTER INSERT ON \"main\".\"comments\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issues') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'issues', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"issues\" WHERE \"id\" = new.\"issue_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_comments_issue_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_comments_issue_id_into_oplog\n   AFTER UPDATE ON \"main\".\"comments\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.issues') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'issues', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"issues\" WHERE \"id\" = new.\"issue_id\";\nEND;"
    ],
    "version": "1"
  }
]