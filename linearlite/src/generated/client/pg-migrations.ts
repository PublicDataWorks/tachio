export default [
  {
    "statements": [
      "CREATE TABLE slack_channels (\n    id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    CONSTRAINT slack_channels_pkey PRIMARY KEY (id)\n)",
      "CREATE TABLE emails (\n    id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    email_address text NOT NULL,\n    CONSTRAINT emails_pkey PRIMARY KEY (id)\n)",
      "CREATE TABLE orgs (\n    id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    name text NOT NULL,\n    shortname text NOT NULL,\n    aliases text,\n    first_contact timestamp with time zone NOT NULL,\n    updated_at timestamp with time zone,\n    website text,\n    primary_email_address_id uuid,\n    primary_slack_channel_id uuid,\n    summary text,\n    note text,\n    missive_conversation_id uuid NOT NULL,\n    missive_label_id uuid NOT NULL,\n    history jsonb,\n    github_id uuid,\n    linear_id uuid,\n    pivotal_tracker_id uuid,\n    CONSTRAINT orgs_pkey PRIMARY KEY (id),\n    CONSTRAINT public_orgs_primary_email_address_fkey FOREIGN KEY (primary_email_address_id) REFERENCES emails(id) ON DELETE SET NULL,\n    CONSTRAINT public_orgs_primary_slack_channel_id_fkey FOREIGN KEY (primary_slack_channel_id) REFERENCES slack_channels(id) ON DELETE SET NULL\n)",
      "CREATE TYPE project_status AS ENUM (\n 'active',\n 'paused',\n 'completed',\n 'archived'\n)",
      "CREATE TABLE projects (\n    id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    name text NOT NULL,\n    shortname text NOT NULL,\n    aliases text,\n    summary text,\n    note text,\n    org_id uuid NOT NULL,\n    missive_conversation_id uuid NOT NULL,\n    missive_label_id uuid NOT NULL,\n    start_date timestamp with time zone NOT NULL,\n    end_date timestamp with time zone,\n    updated_at timestamp with time zone,\n    history jsonb,\n    status project_status,\n    linear_team_id uuid,\n    pivotal_tracker_id bigint,\n    last_sent_biweekly_briefing timestamp with time zone,\n    github_repository_urls text,\n    CONSTRAINT projects_pkey PRIMARY KEY (id),\n    CONSTRAINT public_projects_org_id_fkey FOREIGN KEY (org_id) REFERENCES orgs(id) ON DELETE CASCADE\n)",
      "CREATE TABLE issues (\n    id uuid NOT NULL,\n    title text NOT NULL,\n    description text NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    kanbanorder text,\n    username text NOT NULL,\n    external_urls text,\n    completed_at timestamp with time zone,\n    status text NOT NULL,\n    priority text NOT NULL,\n    updated_at timestamp with time zone,\n    project_id uuid,\n    CONSTRAINT issue_pkey PRIMARY KEY (id),\n    CONSTRAINT public_issues_project_id_fkey FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE\n)",
      "CREATE TABLE comments (\n    id uuid NOT NULL,\n    body text NOT NULL,\n    username text NOT NULL,\n    issue_id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    CONSTRAINT comment_pkey PRIMARY KEY (id),\n    CONSTRAINT comments_issue_id_fkey FOREIGN KEY (issue_id) REFERENCES issues(id) DEFERRABLE\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'slack_channels', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_slack_channels_primarykey ON \"public\".\"slack_channels\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_slack_channels_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_slack_channels_primarykey\n  BEFORE UPDATE ON \"public\".\"slack_channels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_slack_channels_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_slack_channels_into_oplog ON \"public\".\"slack_channels\";",
      "    CREATE OR REPLACE FUNCTION insert_public_slack_channels_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'slack_channels';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'slack_channels',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_slack_channels_into_oplog\n  AFTER INSERT ON \"public\".\"slack_channels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_slack_channels_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_slack_channels_into_oplog ON \"public\".\"slack_channels\";",
      "    CREATE OR REPLACE FUNCTION update_public_slack_channels_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'slack_channels';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'slack_channels',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'id', new.\"id\"),\n            jsonb_build_object('created_at', old.\"created_at\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_slack_channels_into_oplog\n  AFTER UPDATE ON \"public\".\"slack_channels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_slack_channels_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_slack_channels_into_oplog ON \"public\".\"slack_channels\";",
      "    CREATE OR REPLACE FUNCTION delete_public_slack_channels_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'slack_channels';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'slack_channels',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('created_at', old.\"created_at\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_slack_channels_into_oplog\n  AFTER DELETE ON \"public\".\"slack_channels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_slack_channels_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'emails', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_emails_primarykey ON \"public\".\"emails\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_emails_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_emails_primarykey\n  BEFORE UPDATE ON \"public\".\"emails\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_emails_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_emails_into_oplog ON \"public\".\"emails\";",
      "    CREATE OR REPLACE FUNCTION insert_public_emails_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'emails';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'emails',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'email_address', new.\"email_address\", 'id', new.\"id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_emails_into_oplog\n  AFTER INSERT ON \"public\".\"emails\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_emails_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_emails_into_oplog ON \"public\".\"emails\";",
      "    CREATE OR REPLACE FUNCTION update_public_emails_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'emails';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'emails',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'email_address', new.\"email_address\", 'id', new.\"id\"),\n            jsonb_build_object('created_at', old.\"created_at\", 'email_address', old.\"email_address\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_emails_into_oplog\n  AFTER UPDATE ON \"public\".\"emails\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_emails_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_emails_into_oplog ON \"public\".\"emails\";",
      "    CREATE OR REPLACE FUNCTION delete_public_emails_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'emails';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'emails',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('created_at', old.\"created_at\", 'email_address', old.\"email_address\", 'id', old.\"id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_emails_into_oplog\n  AFTER DELETE ON \"public\".\"emails\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_emails_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'orgs', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_orgs_primarykey ON \"public\".\"orgs\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_orgs_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_orgs_primarykey\n  BEFORE UPDATE ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_orgs_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_orgs_into_oplog ON \"public\".\"orgs\";",
      "    CREATE OR REPLACE FUNCTION insert_public_orgs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'orgs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'orgs',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('aliases', new.\"aliases\", 'created_at', new.\"created_at\", 'first_contact', new.\"first_contact\", 'github_id', new.\"github_id\", 'history', new.\"history\", 'id', new.\"id\", 'linear_id', new.\"linear_id\", 'missive_conversation_id', new.\"missive_conversation_id\", 'missive_label_id', new.\"missive_label_id\", 'name', new.\"name\", 'note', new.\"note\", 'pivotal_tracker_id', new.\"pivotal_tracker_id\", 'primary_email_address_id', new.\"primary_email_address_id\", 'primary_slack_channel_id', new.\"primary_slack_channel_id\", 'shortname', new.\"shortname\", 'summary', new.\"summary\", 'updated_at', new.\"updated_at\", 'website', new.\"website\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_orgs_into_oplog\n  AFTER INSERT ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_orgs_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_orgs_into_oplog ON \"public\".\"orgs\";",
      "    CREATE OR REPLACE FUNCTION update_public_orgs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'orgs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'orgs',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('aliases', new.\"aliases\", 'created_at', new.\"created_at\", 'first_contact', new.\"first_contact\", 'github_id', new.\"github_id\", 'history', new.\"history\", 'id', new.\"id\", 'linear_id', new.\"linear_id\", 'missive_conversation_id', new.\"missive_conversation_id\", 'missive_label_id', new.\"missive_label_id\", 'name', new.\"name\", 'note', new.\"note\", 'pivotal_tracker_id', new.\"pivotal_tracker_id\", 'primary_email_address_id', new.\"primary_email_address_id\", 'primary_slack_channel_id', new.\"primary_slack_channel_id\", 'shortname', new.\"shortname\", 'summary', new.\"summary\", 'updated_at', new.\"updated_at\", 'website', new.\"website\"),\n            jsonb_build_object('aliases', old.\"aliases\", 'created_at', old.\"created_at\", 'first_contact', old.\"first_contact\", 'github_id', old.\"github_id\", 'history', old.\"history\", 'id', old.\"id\", 'linear_id', old.\"linear_id\", 'missive_conversation_id', old.\"missive_conversation_id\", 'missive_label_id', old.\"missive_label_id\", 'name', old.\"name\", 'note', old.\"note\", 'pivotal_tracker_id', old.\"pivotal_tracker_id\", 'primary_email_address_id', old.\"primary_email_address_id\", 'primary_slack_channel_id', old.\"primary_slack_channel_id\", 'shortname', old.\"shortname\", 'summary', old.\"summary\", 'updated_at', old.\"updated_at\", 'website', old.\"website\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_orgs_into_oplog\n  AFTER UPDATE ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_orgs_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_orgs_into_oplog ON \"public\".\"orgs\";",
      "    CREATE OR REPLACE FUNCTION delete_public_orgs_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'orgs';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'orgs',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('aliases', old.\"aliases\", 'created_at', old.\"created_at\", 'first_contact', old.\"first_contact\", 'github_id', old.\"github_id\", 'history', old.\"history\", 'id', old.\"id\", 'linear_id', old.\"linear_id\", 'missive_conversation_id', old.\"missive_conversation_id\", 'missive_label_id', old.\"missive_label_id\", 'name', old.\"name\", 'note', old.\"note\", 'pivotal_tracker_id', old.\"pivotal_tracker_id\", 'primary_email_address_id', old.\"primary_email_address_id\", 'primary_slack_channel_id', old.\"primary_slack_channel_id\", 'shortname', old.\"shortname\", 'summary', old.\"summary\", 'updated_at', old.\"updated_at\", 'website', old.\"website\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_orgs_into_oplog\n  AFTER DELETE ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_orgs_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_orgs_primary_email_address_id_into_oplog ON \"public\".\"orgs\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_orgs_primary_email_address_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'orgs';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'emails',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"emails\"\n          WHERE \"id\" = NEW.\"primary_email_address_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_orgs_primary_email_address_id_into_oplog\n  AFTER INSERT ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_orgs_primary_email_address_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_orgs_primary_email_address_id_into_oplog ON \"public\".\"orgs\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_orgs_primary_email_address_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'orgs';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'emails',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"emails\"\n          WHERE \"id\" = NEW.\"primary_email_address_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_orgs_primary_email_address_id_into_oplog\n  AFTER UPDATE ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_orgs_primary_email_address_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_orgs_primary_slack_channel_id_into_oplog ON \"public\".\"orgs\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_orgs_primary_slack_channel_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'orgs';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'slack_channels',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"slack_channels\"\n          WHERE \"id\" = NEW.\"primary_slack_channel_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_orgs_primary_slack_channel_id_into_oplog\n  AFTER INSERT ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_orgs_primary_slack_channel_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_orgs_primary_slack_channel_id_into_oplog ON \"public\".\"orgs\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_orgs_primary_slack_channel_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'orgs';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'slack_channels',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"slack_channels\"\n          WHERE \"id\" = NEW.\"primary_slack_channel_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_orgs_primary_slack_channel_id_into_oplog\n  AFTER UPDATE ON \"public\".\"orgs\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_orgs_primary_slack_channel_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'projects', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_projects_primarykey ON \"public\".\"projects\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_projects_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_projects_primarykey\n  BEFORE UPDATE ON \"public\".\"projects\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_projects_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_projects_into_oplog ON \"public\".\"projects\";",
      "    CREATE OR REPLACE FUNCTION insert_public_projects_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'projects';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'projects',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('aliases', new.\"aliases\", 'created_at', new.\"created_at\", 'end_date', new.\"end_date\", 'github_repository_urls', new.\"github_repository_urls\", 'history', new.\"history\", 'id', new.\"id\", 'last_sent_biweekly_briefing', new.\"last_sent_biweekly_briefing\", 'linear_team_id', new.\"linear_team_id\", 'missive_conversation_id', new.\"missive_conversation_id\", 'missive_label_id', new.\"missive_label_id\", 'name', new.\"name\", 'note', new.\"note\", 'org_id', new.\"org_id\", 'pivotal_tracker_id', cast(new.\"pivotal_tracker_id\" as TEXT), 'shortname', new.\"shortname\", 'start_date', new.\"start_date\", 'status', new.\"status\", 'summary', new.\"summary\", 'updated_at', new.\"updated_at\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_projects_into_oplog\n  AFTER INSERT ON \"public\".\"projects\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_projects_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_projects_into_oplog ON \"public\".\"projects\";",
      "    CREATE OR REPLACE FUNCTION update_public_projects_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'projects';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'projects',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('aliases', new.\"aliases\", 'created_at', new.\"created_at\", 'end_date', new.\"end_date\", 'github_repository_urls', new.\"github_repository_urls\", 'history', new.\"history\", 'id', new.\"id\", 'last_sent_biweekly_briefing', new.\"last_sent_biweekly_briefing\", 'linear_team_id', new.\"linear_team_id\", 'missive_conversation_id', new.\"missive_conversation_id\", 'missive_label_id', new.\"missive_label_id\", 'name', new.\"name\", 'note', new.\"note\", 'org_id', new.\"org_id\", 'pivotal_tracker_id', cast(new.\"pivotal_tracker_id\" as TEXT), 'shortname', new.\"shortname\", 'start_date', new.\"start_date\", 'status', new.\"status\", 'summary', new.\"summary\", 'updated_at', new.\"updated_at\"),\n            jsonb_build_object('aliases', old.\"aliases\", 'created_at', old.\"created_at\", 'end_date', old.\"end_date\", 'github_repository_urls', old.\"github_repository_urls\", 'history', old.\"history\", 'id', old.\"id\", 'last_sent_biweekly_briefing', old.\"last_sent_biweekly_briefing\", 'linear_team_id', old.\"linear_team_id\", 'missive_conversation_id', old.\"missive_conversation_id\", 'missive_label_id', old.\"missive_label_id\", 'name', old.\"name\", 'note', old.\"note\", 'org_id', old.\"org_id\", 'pivotal_tracker_id', cast(old.\"pivotal_tracker_id\" as TEXT), 'shortname', old.\"shortname\", 'start_date', old.\"start_date\", 'status', old.\"status\", 'summary', old.\"summary\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_projects_into_oplog\n  AFTER UPDATE ON \"public\".\"projects\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_projects_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_projects_into_oplog ON \"public\".\"projects\";",
      "    CREATE OR REPLACE FUNCTION delete_public_projects_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'projects';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'projects',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('aliases', old.\"aliases\", 'created_at', old.\"created_at\", 'end_date', old.\"end_date\", 'github_repository_urls', old.\"github_repository_urls\", 'history', old.\"history\", 'id', old.\"id\", 'last_sent_biweekly_briefing', old.\"last_sent_biweekly_briefing\", 'linear_team_id', old.\"linear_team_id\", 'missive_conversation_id', old.\"missive_conversation_id\", 'missive_label_id', old.\"missive_label_id\", 'name', old.\"name\", 'note', old.\"note\", 'org_id', old.\"org_id\", 'pivotal_tracker_id', cast(old.\"pivotal_tracker_id\" as TEXT), 'shortname', old.\"shortname\", 'start_date', old.\"start_date\", 'status', old.\"status\", 'summary', old.\"summary\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_projects_into_oplog\n  AFTER DELETE ON \"public\".\"projects\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_projects_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_projects_org_id_into_oplog ON \"public\".\"projects\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_projects_org_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'projects';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'orgs',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"orgs\"\n          WHERE \"id\" = NEW.\"org_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_projects_org_id_into_oplog\n  AFTER INSERT ON \"public\".\"projects\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_projects_org_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_projects_org_id_into_oplog ON \"public\".\"projects\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_projects_org_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'projects';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'orgs',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"orgs\"\n          WHERE \"id\" = NEW.\"org_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_projects_org_id_into_oplog\n  AFTER UPDATE ON \"public\".\"projects\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_projects_org_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'issues', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_issues_primarykey ON \"public\".\"issues\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_issues_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_issues_primarykey\n  BEFORE UPDATE ON \"public\".\"issues\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_issues_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_issues_into_oplog ON \"public\".\"issues\";",
      "    CREATE OR REPLACE FUNCTION insert_public_issues_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'issues';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'issues',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('completed_at', new.\"completed_at\", 'created_at', new.\"created_at\", 'description', new.\"description\", 'external_urls', new.\"external_urls\", 'id', new.\"id\", 'kanbanorder', new.\"kanbanorder\", 'priority', new.\"priority\", 'project_id', new.\"project_id\", 'status', new.\"status\", 'title', new.\"title\", 'updated_at', new.\"updated_at\", 'username', new.\"username\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_issues_into_oplog\n  AFTER INSERT ON \"public\".\"issues\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_issues_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_issues_into_oplog ON \"public\".\"issues\";",
      "    CREATE OR REPLACE FUNCTION update_public_issues_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'issues';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'issues',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('completed_at', new.\"completed_at\", 'created_at', new.\"created_at\", 'description', new.\"description\", 'external_urls', new.\"external_urls\", 'id', new.\"id\", 'kanbanorder', new.\"kanbanorder\", 'priority', new.\"priority\", 'project_id', new.\"project_id\", 'status', new.\"status\", 'title', new.\"title\", 'updated_at', new.\"updated_at\", 'username', new.\"username\"),\n            jsonb_build_object('completed_at', old.\"completed_at\", 'created_at', old.\"created_at\", 'description', old.\"description\", 'external_urls', old.\"external_urls\", 'id', old.\"id\", 'kanbanorder', old.\"kanbanorder\", 'priority', old.\"priority\", 'project_id', old.\"project_id\", 'status', old.\"status\", 'title', old.\"title\", 'updated_at', old.\"updated_at\", 'username', old.\"username\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_issues_into_oplog\n  AFTER UPDATE ON \"public\".\"issues\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_issues_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_issues_into_oplog ON \"public\".\"issues\";",
      "    CREATE OR REPLACE FUNCTION delete_public_issues_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'issues';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'issues',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('completed_at', old.\"completed_at\", 'created_at', old.\"created_at\", 'description', old.\"description\", 'external_urls', old.\"external_urls\", 'id', old.\"id\", 'kanbanorder', old.\"kanbanorder\", 'priority', old.\"priority\", 'project_id', old.\"project_id\", 'status', old.\"status\", 'title', old.\"title\", 'updated_at', old.\"updated_at\", 'username', old.\"username\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_issues_into_oplog\n  AFTER DELETE ON \"public\".\"issues\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_issues_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_issues_project_id_into_oplog ON \"public\".\"issues\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_issues_project_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'issues';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'projects',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"projects\"\n          WHERE \"id\" = NEW.\"project_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_issues_project_id_into_oplog\n  AFTER INSERT ON \"public\".\"issues\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_issues_project_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_issues_project_id_into_oplog ON \"public\".\"issues\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_issues_project_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'issues';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'projects',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"projects\"\n          WHERE \"id\" = NEW.\"project_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_issues_project_id_into_oplog\n  AFTER UPDATE ON \"public\".\"issues\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_issues_project_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'comments', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_comments_primarykey ON \"public\".\"comments\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_comments_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_comments_primarykey\n  BEFORE UPDATE ON \"public\".\"comments\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_comments_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_comments_into_oplog ON \"public\".\"comments\";",
      "    CREATE OR REPLACE FUNCTION insert_public_comments_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'comments';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'comments',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('body', new.\"body\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'issue_id', new.\"issue_id\", 'username', new.\"username\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_comments_into_oplog\n  AFTER INSERT ON \"public\".\"comments\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_comments_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_comments_into_oplog ON \"public\".\"comments\";",
      "    CREATE OR REPLACE FUNCTION update_public_comments_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'comments';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'comments',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('body', new.\"body\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'issue_id', new.\"issue_id\", 'username', new.\"username\"),\n            jsonb_build_object('body', old.\"body\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'issue_id', old.\"issue_id\", 'username', old.\"username\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_comments_into_oplog\n  AFTER UPDATE ON \"public\".\"comments\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_comments_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_comments_into_oplog ON \"public\".\"comments\";",
      "    CREATE OR REPLACE FUNCTION delete_public_comments_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'comments';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'comments',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('body', old.\"body\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'issue_id', old.\"issue_id\", 'username', old.\"username\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_comments_into_oplog\n  AFTER DELETE ON \"public\".\"comments\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_comments_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_comments_issue_id_into_oplog ON \"public\".\"comments\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_comments_issue_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'comments';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'issues',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"issues\"\n          WHERE \"id\" = NEW.\"issue_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_comments_issue_id_into_oplog\n  AFTER INSERT ON \"public\".\"comments\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_comments_issue_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_comments_issue_id_into_oplog ON \"public\".\"comments\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_comments_issue_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'comments';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'issues',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"issues\"\n          WHERE \"id\" = NEW.\"issue_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_comments_issue_id_into_oplog\n  AFTER UPDATE ON \"public\".\"comments\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_comments_issue_id_into_oplog_function();"
    ],
    "version": "1"
  }
]